{"version":3,"sources":["component/layout/Header.js","component/AddTodo.js","component/TodoItem.js","component/Todos.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","textAlign","backgroundColor","color","padding","Header","react_default","a","createElement","style","AddTodo","state","title","handleInput","e","_this","setState","target","value","console","log","handleSubmit","preventDefault","props","addTodo","formStyle","onSubmit","this","type","name","placeholder","inputStyle","onChange","submitStyle","React","Component","display","flexGrow","border","cursor","TodoItem","getStyle","background","borderBottom","textDecoration","todo","completed","btnStyle","borderRadius","float","_this$props$todo","id","markComplete","bind","onClick","delTodo","Todos","todos","map","component_TodoItem","key","App","axios","delete","concat","then","response","filter","newTodo","num","Object","toConsumableArray","_this2","get","data","className","layout_Header","component_AddTodo","component_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd6b240e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n\treturn (\n\t\t<header style={headerStyle}>\n\t\t\t<h1>To Do List</h1>\n\t\t</header>\n\t);\n}\n\nconst headerStyle = {\n\ttextAlign: 'center',\n\tbackgroundColor: '#2980b9',\n\tcolor: '#fff',\n\tpadding: '5px 0px',\n}\n\nexport default Header;","import React from 'react';\n\nclass AddTodo extends React.Component {\n\tstate = {\n\t\ttitle: '',\n\t}\n\n\thandleInput = (e) => {\n\t\tthis.setState({\n\t\t\ttitle: e.target.value,\n\t\t})\n\t\tconsole.log(this.state.title);\n\t}\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tthis.props.addTodo(this.state.title);\n\t\tthis.setState({\n\t\t\ttitle: '',\n\t\t})\n\t}\n\n\trender() {\t\t\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<form style={formStyle} onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input type=\"text\" name='title' placeholder=\"Add to do\" style={inputStyle} onChange={this.handleInput} value={this.state.title}/>\n\t\t\t\t\t<input type=\"submit\" style={submitStyle} />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst formStyle = {\n\tdisplay: 'flex',\n}\n\nconst inputStyle = {\n\tpadding: '5px 5px',\n\tflexGrow: '8',\n}\n\nconst submitStyle = {\n\tpadding: '5px 5px',\n\tflexGrow: '1',\n\tbackgroundColor: '#007bff',\n\t\n\tborder: 'none',\n\tcolor: 'white',\n\tcursor: 'pointer'\n}\n\nexport default AddTodo;","import React from 'react';\n\nclass TodoItem extends React.Component {\n\tgetStyle = () => {\n\t\treturn {\n\t\t\tbackground: '#f4f4f4',\n\t\t\tpadding: '5px',\n\t\t\tborderBottom: '1px solid #ccc',\n\t\t\ttextDecoration: this.props.todo.completed ? 'line-through' : 'none',\n\t\t}\n\t}\n\n\tbtnStyle = {\n\t\tbackground: '#dc3545',\n\t\tcolor: '#fff',\n\t\tborder: 'none',\n\t\tborderRadius: '25px',\n\t\tfloat: 'right',\n\t\tcursor: 'pointer',\n\t\tpadding: '4px 7px'\n\t}\n\n\tmarkComplete(e) {\n\t\tconsole.log(this.props);\n\t}\n\n\trender() {\n\t\tconst { id, title } = this.props.todo;\n\t\treturn(\n\t\t\t<div style={this.getStyle()}>\n\t\t\t\t<p>\n\t\t\t\t\t<input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} />\n\t\t\t\t\t{id}. {title}\n\t\t\t\t\t<button style={this.btnStyle} onClick={this.props.delTodo.bind(this, id)}>X</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TodoItem;","import React from 'react';\nimport TodoItem from './TodoItem';\n\nclass Todos extends React.Component {\n  markComplete() {\n  \tconsole.log('hello');\n  }\n\n  render() {\n    return this.props.todos.map((todo) => (\n    \t<TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\n    ));\n  }\n}\n\nexport default Todos;","import React from 'react';\nimport './App.css';\n// Layout\nimport Header from './component/layout/Header';\nimport AddTodo from './component/AddTodo';\nimport Todos from './component/Todos';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then((response) => {\n      this.setState({\n        todos: response.data,\n        num: 11,\n      })\n    })\n  }\n\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo => {\n      if (id === todo.id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    }) });\n  }\n\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(response => {\n      this.setState({ todos: this.state.todos.filter(todo => {\n        return id !== todo.id;\n      }) })\n    })\n  }\n\n  addTodo = (title) => {\n    const newTodo = {\n      id: this.state.num,\n      title,\n      completed: false\n    }\n\n    this.setState({\n      todos: [...this.state.todos, newTodo],\n      num: this.state.num+1,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">        \n        <Header />\n        <AddTodo addTodo={this.addTodo} />\n        <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}